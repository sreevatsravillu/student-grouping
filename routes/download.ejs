<!DOCTYPE html>
<html>
<head>
  <title>Personal Profile Survey Builder</title>
  
  <!-- Material UI CSS -->
  <link
    rel="stylesheet"
    href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
  />
  <link
    rel="stylesheet"
    href="https://unpkg.com/@mui/material@latest/dist/mui-material.min.css"
  />
  <!-- Material Icons -->
  <link
    rel="stylesheet"
    href="https://fonts.googleapis.com/icon?family=Material+Icons"
  />

  <!-- React and Material UI Scripts -->
  <script src="https://unpkg.com/react@latest/umd/react.production.min.js"></script>
  <script src="https://unpkg.com/react-dom@latest/umd/react-dom.production.min.js"></script>
  <script src="https://unpkg.com/@mui/material@latest/umd/material-ui.production.min.js"></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

  <style>
    body {
      margin: 0;
      font-family: 'Roboto', sans-serif;
      background-color: #f5f5f5;
      font-family: FF Real Head, Lato, Arial, sans-serif !important;
    }

   
  </style>
</head>
<body>
  <button class="clear-data-btn btn-flat waves-effect btn-outlined" onclick="confirmClear()">
    <i class="material-icons">delete</i>
    Clear Data
  </button>

  <button class="clear-data-btn btn-flat waves-effect btn-outlined" onclick="downloadBackupFiles()">
    <i class="material-icons">download</i>
    download 3 backup files
  </button>

  <script>
   async function confirmClear() {
      if (confirm('Are you sure you want to clear all student data and start a new batch?')) {
        try {
          const response = await fetch('/clear-all', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          if (response.ok) {
            window.location.reload();
          } else {
            M.toast({html: 'Failed to clear data'});
          }
        } catch (error) {
          console.error('Error:', error);
          M.toast({html: 'Failed to clear data'});
        }
      }
    }

    async function downloadBackupFiles() {
    const files = ['forms.json', 'skills.json', 'students.json'];
    for (const file of files) {
      try {
        const response = await fetch(`/data/${file}`);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = file;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
      } catch (error) {
        console.error(`Failed to download ${file}:`, error);
        M.toast({html: `Failed to download ${file}: ${error.message}`});
      }
    }
  }
  </script>
</body>
</html>