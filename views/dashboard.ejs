<!DOCTYPE html>
<html>
   <head>
      <title>Dashboard</title>
      <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
      <link rel="stylesheet" href="./../public/style.css">
      <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
      <style>
         /* Add styles for clipped drawer */
         body {
         display: flex;
         min-height: 100vh;
         flex-direction: column;
         font-family: FF Real Head, Lato, Arial, sans-serif !important;
         }
         main {
         flex: 1 0 auto;
         padding-left: 60px; /* Width of the side nav */
         }
         .default-bg-color{
         background-color: #c8102e !important
         }
         /* Fixed navbar */
         nav {
         background-color: black !important;
         position: fixed;
         top: 0;
         width: 100%;
         z-index: 997;
         }
         .header-logo{
         height: 100%;
         width: 6%;
         }
         .brand-logo{
         font-size: 1.5rem !important;
         font-weight: bold;
         }
         /* Fixed sidenav */
         .sidenav {
         width:160px !important; 
         height: calc(100% - 64px); /* Subtract navbar height */
         top: 64px; /* Start below navbar */
         box-shadow: none;
         border-right: 1px solid #ddd;
         a{
         padding:0 18px !important;
         }
         }
         .side-nav-button {
         width: 100%;
         text-align: left;
         padding: 0 32px;
         }
         .sidenav li>a>i.material-icons {
         margin: 0px 12px 0 0;
         }
         .clear-data-btn {
         color: #f44336;
         display: flex;
         float: right;
         border: 0.4px solid #f44336;
         border-radius: 6px;
         }
         #url-text{
         border-radius: 4px;
         padding: 10px;
         border: 0.2px solid gray;
         }
         .chip-container {
         display: flex;
         flex-wrap: wrap;
         gap: 8px;
         }
         .chip {
         display: inline-flex;
         align-items: center;
         height: 32px;
         padding: 0 12px;
         margin: 0;
         font-size: 13px;
         border-radius: 16px;
         background: transparent;
         }
         .chip i {
         margin-right: 4px;
         }
         .group-name {
         font-weight: 500;
         color: rgba(0, 0, 0, 0.87);
         }
         .highlight tbody tr:hover {
         background-color: rgba(0, 0, 0, 0.04);
         }
         .card .table-container {
         margin: 0;
         padding: 0;
         overflow-x: auto;
         }
         #formNameLabel{
         font-weight: bold;
         font-size: 18px;
         }
         table.bordered {
         border: 1px solid rgba(177 174 174);
         border-collapse: collapse;
         }
         table.bordered th,
         table.bordered td {
         border: 1px solid rgba(177 174 174);
         }
         thead {
         background-color: #dd3350 !important; /* Material Blue 800 */
         }
         th {
         min-width: 110px;
         background-color: #f5f5f5;
         padding: 16px !important;
         border-bottom: 1px solid rgba(177 174 174);
         font-weight: 600 !important;
         }
         td {
         padding: 16px !important;
         border-bottom: 1px solid rgba(177 174 174);
         }
         /* Vertical grid lines */
         td:not(:last-child),
         th:not(:last-child) {
         border-right: 1px solid rgba(177 174 174);
         }
         /* Horizontal grid lines */
         tr:not(:last-child) td {
         border-bottom: 1px solid rgba(177 174 174);
         }
         /* Responsive adjustments */
         @media only screen and (max-width: 992px) {
         main {
         padding-left: 0;
         }
         .sidenav {
         height: 100%;
         top: 0;
         }
         }
         /* Add padding to main content to prevent overlap with navbar */
         .main-content {
         margin-top: 84px;
         margin-left: 140px;
         width: 86%;
         }
         /* Add styles for modal */
         #skillsModal {
         position: fixed;
         z-index: 1000;
         left: 0;
         top: 0;
         width: 100%;
         height: 100%;
         overflow: auto;
         background-color: rgba(0,0,0,0.4);
         }
         .modal-content {
         background-color: #fefefe;
         margin: 15% auto;
         padding: 20px;
         border: 1px solid #888;
         width: 80%;
         }
         .close {
         color: #aaa;
         float: right;
         font-size: 28px;
         font-weight: bold;
         }
         .close:hover,
         .close:focus {
         color: black;
         text-decoration: none;
         cursor: pointer;
         }
         #skillsListDisplay {
         list-style-type: none;
         padding: 0;
         }
         #skillsListDisplay li {
         background-color: #dfd6d6;
         padding: 10px;
         margin: 5px;
         cursor: grab;
         border-radius: 4px;
         }
         #skillsListDisplay li.dragging {
         opacity: 0.5;
         }
         .drag-icon{
         padding: 5px 5px 0 0;
         }
      </style>
   </head>
   <body>
      <!-- Fixed Navbar -->
      <nav >
         <div class="nav-wrapper">
            <a href="#" data-target="slide-out" class="sidenav-trigger hide-on-large-only">
            <i class="material-icons">menu</i>
            </a>
            <img src="/Northeastern_Huskies.svg" alt="logo" class="header-logo" >
            <a href="#" class="brand-logo">Student Groups Dashboard</a>
         </div>
      </nav>
      <!-- Clipped Side Navigation -->
      <ul id="slide-out" class="sidenav sidenav-fixed">
         <li><a href="/form-builder" class="waves-effect"><i class="material-icons">build</i>Form Builder</a></li>
         <li>
            <div class="divider"></div>
         </li>
      </ul>
      <!-- Main Content -->
      <main>
         <div class="container main-content">
            <!-- <div class="drawer-header">
               <button class="clear-data-btn btn-flat waves-effect btn-outlined" onclick="confirmClear()">
                 <i class="material-icons">delete</i>
                 Clear Data
               </button>
               </div> -->
            <div id="student-form-url" style="margin-bottom: 20px;">
               <ul>
                  <% formKeys.forEach(key => { %>
                  <li style="padding-bottom: 10px;">
                     <span id="formNameLabel"><%= `${key.fileName}` %> : </span>
                     <span id="url-text"><%= `${baseUrl}/${key.fileName}` %></span> <!-- Construct the URL directly in EJS -->
                     <button class="btn copy-url-btn waves-effect waves-light" style="margin-left: 10px; background-color: #c8102e; color: white;">Copy URL</button> <!-- Updated Copy button style -->
                     <button class="btn show-groups-btn waves-effect waves-light" 
                        style="margin-left: 10px; background-color: #c8102e; color: white;"
                        data-key="<%= JSON.stringify(key) %>">Show groups</button> 
                  </li>
                  <% }) %>
               </ul>
            </div>
            <!-- Modal for confirming skills -->
            <div id="skillsModal" style="display:none;">
               <div class="modal-content">
                  <span class="close" onclick="closeModal()">&times;</span>
                  <h4 style="font-weight: bold;">Sorting Priority</h4>
                  <span class="material-icons" 
                     style=" font-size: 16px; vertical-align: middle;">info</span>
                  <span style="font-style: italic;font-size: 14px;">Drag to Reorder</span>
                  <ul id="skillsListDisplay"></ul>
                  <input type="number" id="groupSizeInput" min="2" style="margin-top: 10px; width: 100%; border: solid black 1px; border-radius: 7px;" placeholder="Change Group Size"
                     oninput="this.value = this.value.replace(/[^0-9]/g, '')" class="group-input">
                  <div style="text-align: center;">
                     <button  type="submit"  class="btn waves-effect waves-light default-bg-color" onclick="closeModal()">Confirm</button>
                  </div>
               </div>
            </div>
            <div>
               <h5>Student Groups : <span style="color:#c8102e"><%= `${selectedForm}` %></span></h5>
            </div>
            <div class="row">
               <div class="col s12">
                  <div class="card">
                     <div class="card-content">
                        <div class="table-container">
                           <table class="highlight bordered responsive-table">
                              <thead>
                                 <tr>
                                    <th style="font-weight: 600; color: rgba(0, 0, 0, 0.87); background-color: #cfd8dc;">Group</th>
                                    <th style="font-weight: 600; color: rgba(0, 0, 0, 0.87); background-color: #cfd8dc;">Students</th>
                                    <% tableTitle.forEach(title => { %>
                                    <th style="font-weight: 600; color: rgba(0, 0, 0, 0.87); background-color: #cfd8dc;"><%= title %></th>
                                    <% }) %>
                                 </tr>
                              </thead>
                              <tbody>
                                 <% for (const group in groups) { %>
                                 <% 
                                    // Track if the group name has been displayed
                                    let isFirstStudent = true; 
                                    %>
                                 <% groups[group].studentsAndSkills.forEach((student) => { %>
                                 <tr>
                                    <td class="group-cell">
                                       <% if (isFirstStudent) { %>
                                       <div class="group-name"><%= group %></div>
                                       <% isFirstStudent = false; } else { %>
                                       <div class="group-name" style="visibility: hidden;">&nbsp;</div>
                                       <% } %>
                                    </td>
                                    <td>
                                       <div class="chip-container">
                                          <div class="chip">
                                             <i class="material-icons tiny">person</i>
                                             <%= student.name %>
                                          </div>
                                       </div>
                                    </td>
                                    <% student.skills.forEach(skillDetails => { %>
                                    <td style="font-weight: 600; color: rgba(0, 0, 0, 0.87); background-color: #cfd8dc;">
                                       <%= skillDetails.value %>
                                    </td>
                                    <% }) %>
                                 </tr>
                                 <% }) %>
                                 <% } %>
                              </tbody>
                           </table>
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div>
      </main>
      <!-- Scripts -->
      <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
      <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script> 
      <script>
         var fileNameSelected ="";
         var selectedFormSkillsGlob =[];
         document.addEventListener('DOMContentLoaded', function() {
           var elems = document.querySelectorAll('.sidenav');
           var instances = M.Sidenav.init(elems, {
             edge: 'left',
             draggable: true
           });
         });
         // async function confirmClear() {
         //   if (confirm('Are you sure you want to clear all student data and start a new batch?')) {
         //     try {
         //       const response = await fetch('/clear-all', {
         //         method: 'POST',
         //         headers: {
         //           'Content-Type': 'application/json'
         //         }
         //       });
               
         //       if (response.ok) {
         //         window.location.reload();
         //       } else {
         //         M.toast({html: 'Failed to clear data'});
         //       }
         //     } catch (error) {
         //       console.error('Error:', error);
         //       M.toast({html: 'Failed to clear data'});
         //     }
         //   }
         // }
         
         
         document.querySelectorAll('.copy-url-btn').forEach((button, index) => {
           button.addEventListener('click', function() {
             const key = JSON.parse('<%- JSON.stringify(formKeys) %>')[index]; // Get the corresponding key
             const studentFormUrl = '<%- baseUrl %>' + '/' + key.fileName; // Use the base URL from the server
         
             console.log('Copying URL:', studentFormUrl); // Debugging line
         
             navigator.clipboard.writeText(studentFormUrl).then(() => {
               M.toast({html: 'URL copied to clipboard!'}); // Show success message
             }).catch(err => {
               console.error('Error copying URL: ', err);
               M.toast({html: 'Failed to copy URL'}); // Show error message
             });
           });
         });
         
         function clearGlobalVar(){
         fileNameSelected ="";
         selectedFormSkills =[];
         }
         
         document.querySelectorAll('.show-groups-btn').forEach(button => {
         button.addEventListener('click', function() {
         clearGlobalVar()
         
         const reqKey = JSON.parse(this.getAttribute('data-key')); // Get the key from the button's data attribute 
         // const inputField = this.nextElementSibling; // Get the input field next to the button
         // const manualGroupValue = inputField.value;
         console.log(reqKey,reqKey.studentCount)
         
         fileNameSelected = reqKey.fileName
         selectedFormSkillsGlob = reqKey.selectedFormSkills
         // Clear previous skills in the modal
         const skillsListDisplay = document.getElementById('skillsListDisplay');
         skillsListDisplay.innerHTML = ''; 
         if (reqKey['selectedFormSkills'] && reqKey.studentCount > 0  ){
           reqKey['selectedFormSkills'].forEach(skill => {
             const li = document.createElement('li');
             li.style.display = 'flex'; // Set li to use flexbox
             li.style.alignItems = 'center'; // Center items vertically
             
             const iconSpan = document.createElement('span');
             iconSpan.className = 'icon-container'; // Add a class for styling
             iconSpan.innerHTML = '<i class="material-icons drag_handle drag-icon">drag_handle</i>'; // Use Material Icons for drag handle
             li.appendChild(iconSpan);
             // li.textContent = skill.skillName;
             li.appendChild(document.createTextNode(skill.skillName)); // Correctly append the skill name
         
             li.setAttribute('draggable', 'true');
             li.addEventListener('dragstart', dragStart);
             li.addEventListener('dragend', dragEnd);
             skillsListDisplay.appendChild(li);
           });
         
           // // Show the modal
           document.getElementById('skillsModal').style.display = 'block'
          
           // try {
           //   const response =   fetch('/fetchFormGrouing', {
           //   method: 'POST',
           //   headers: {
           //     'Content-Type': 'application/json',
           //   },
           //   body: JSON.stringify({ key: reqKey, manualGroupSize:manualGroupValue }) // Send the key in the request body
           // });
           //     // // Show the modal
           // document.getElementById('skillsModal').style.display = 'block'
           //     // window.location.reload(); // Refresh the page after successful clear
         
           // }catch(error) {
           //   console.error('There was a problem with the fetch operation:', error);
           // };
         }else if(reqKey.studentCount <= 0){
           M.toast({html: 'None of the students have filled the form for grouping'});
         }
         
         });
         });
         
         let draggedItem = null;
         
         function closeModal() {
         
         // const newOrder = Array.from(document.querySelectorAll('#skillsListDisplay li')).map(li => li.textContent);
         const newOrder = Array.from(document.querySelectorAll('#skillsListDisplay li')).map(li => li.childNodes[1].textContent.trim());
         
         console.log(newOrder)
         selectedFormSkillsGlob.sort((a, b) => {
         return newOrder.indexOf(a.skillName) - newOrder.indexOf(b.skillName);
         });
         const manualGroupValue = document.getElementById('groupSizeInput').value; // Get the value from the input in the modal
         // ... existing code to handle the confirmation ...
         console.log('Group Size:', manualGroupValue);
         console.log({ key: {fileName :fileNameSelected,
           manualGroupValue:manualGroupValue, selectedFormSkills:selectedFormSkillsGlob }})
           if( !manualGroupValue || manualGroupValue > 1){
             document.getElementById('skillsModal').style.display = 'none'; // Hide modal
               try {
                   const response =   fetch('/fetchFormGrouing', {
                   method: 'POST',
                   headers: {
                     'Content-Type': 'application/json',
                   },
                   body: JSON.stringify( {fileName :fileNameSelected,
                     selectedFormSkills:selectedFormSkillsGlob , manualGroupSize:manualGroupValue }) // Send the key in the request body
                 });
         
                 clearGlobalVar();
                     window.location.reload(); // Refresh the page after successful clear
               
                 }catch(error) {
                   console.error('There was a problem with the fetch operation:', error);
                 };
               }else if(manualGroupValue <= 1){
                  M.toast({html: 'Please enter a value of 2 or greater for the group size.'});
               }
         
         }
         
         // Drag and drop event handlers
         function dragStart(e) {
         draggedItem = e.target;
         setTimeout(() => {
             e.target.style.display = 'none';
         }, 0);
         }
         
         function dragEnd(e) {
         setTimeout(() => {
             e.target.style.display = '';
             draggedItem = null;
         }, 0);
         }
         document.getElementById('skillsListDisplay').addEventListener('dragover', (e) => {
         e.preventDefault();
         const afterElement = getDragAfterElement(e.clientY);
         const currentElement = document.querySelector('.dragging');
         if (afterElement == null) {
             skillsListDisplay.appendChild(draggedItem);
         } else {
             skillsListDisplay.insertBefore(draggedItem, afterElement);
         }
         });
         const getDragAfterElement = (y) => {
         const draggableElements = [
             ...document.querySelectorAll('#skillsListDisplay li:not(.dragging)'),
         ];
         
         return draggableElements.reduce((closest, child) => {
             const box = child.getBoundingClientRect();
             const offset = y - box.top - box.height / 2;
             if (offset < 0 && offset > closest.offset) {
                 return {
                     offset: offset,
                     element: child,
                 };
             } else {
                 return closest;
             }
         }, {
             offset: Number.NEGATIVE_INFINITY,
         }).element;
         };
         
      </script>
   </body>
</html>
