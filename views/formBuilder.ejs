<!DOCTYPE html>
<html>
<head>
  <title>Personal Profile Survey Builder</title>
  
  <!-- Material UI CSS -->
  <link
    rel="stylesheet"
    href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
  />
  <link
    rel="stylesheet"
    href="https://unpkg.com/@mui/material@latest/dist/mui-material.min.css"
  />
  <!-- Material Icons -->
  <link
    rel="stylesheet"
    href="https://fonts.googleapis.com/icon?family=Material+Icons"
  />

  <!-- React and Material UI Scripts -->
  <script src="https://unpkg.com/react@latest/umd/react.production.min.js"></script>
  <script src="https://unpkg.com/react-dom@latest/umd/react-dom.production.min.js"></script>
  <script src="https://unpkg.com/@mui/material@latest/umd/material-ui.production.min.js"></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

  <style>
    body {
      margin: 0;
      font-family: 'Roboto', sans-serif;
      background-color: #f5f5f5;
      font-family: FF Real Head, Lato, Arial, sans-serif !important;
    }
    .form-builder-header{
      display:flex;
      background-color: black;
      .header-title{
        color: white;
      }
    .header-logo{
      width:5%;
      height:100%
    }
    }
    

    .container {
      max-width: 800px;
      margin: 40px auto;
      padding: 20px;
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    h1 {
      color: #c8102e;
      text-align: center;
      margin-bottom: 30px;
    }

    .form-group {
      margin-bottom: 20px;
    }

    .input-field {
      width: 98%;
      padding: 12px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 16px;
      transition: border-color 0.3s;
    }

    .input-field:focus {
      border-color: #c8102e;
      outline: none;
    }

    label {
      display: block;
      margin-bottom: 8px;
      color: black;
      font-weight: 500;
    }

    .skill-container {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 15px;
    }

    .skill-input {
      flex-grow: 1;
    }

    .button-group {
      display: flex;
      gap: 10px;
      align-items: center;
      margin-bottom: 20px;
    }

    .add-skill-btn {
      background: none;
      border: none;
      color: #c8102e;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 5px;
      padding: 8px;
      border-radius: 4px;
      transition: background-color 0.3s;
    }

    .add-skill-btn:hover {
      background-color: rgba(25, 118, 210, 0.1);
    }

    .skill-container {
      display: flex;
      align-items: flex-end; /* Changed from center to flex-end */
      gap: 10px;
      margin-bottom: 15px;
    }

    .skill-input {
      flex-grow: 1;
    }

    .delete-btn {
      background: none;
      border: none;
      color: #f44336;
      cursor: pointer;
      padding: 8px;
      border-radius: 4px;
      transition: background-color 0.3s;
      margin-bottom: 7px; /* Added to align with input field */
      height: 42px; /* Match height with input field */
      display: flex;
      align-items: center;
      margin-left: 20px;
    }

    .delete-btn:hover {
      background-color: rgba(244, 67, 54, 0.1);
    }

    .create-form-btn {
      background-color: #c8102e;
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 4px;
      font-size: 16px;
      cursor: pointer;
      transition: background-color 0.3s;
      width: 100%;
    }

    .create-form-btn:hover {
      background-color: #dd3350;
    }

    .tooltip {
    position: relative;
    display: inline-block;
    }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 5px;
    padding: 5px;
    position: absolute;
    z-index: 1;
    bottom: 125%; /* Position above the icon */
    left: 50%;
    margin-left: -60px; /* Center the tooltip */
    opacity: 0;
    transition: opacity 0.3s;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
    opacity: 1;
    width: 200px;
    font-size: 12px;
  }

   /* Add styles for modal */
   #skillsModal {
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.4);
  }
  .modal-content {
    background-color: #fefefe;
    margin: 15% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
  }
  .close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
  }
  .close:hover,
  .close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
  }

#skillsListDisplay {
    list-style-type: none;
    padding: 0;
}

#skillsListDisplay li {
    background-color: #dfd6d6;
    padding: 10px;
    margin: 5px;
    cursor: grab;
    border-radius: 4px;
}

#skillsListDisplay li.dragging {
    opacity: 0.5;
}
  </style>
</head>
<body>
  <div class="form-builder-header">
    <img src="/Northeastern_Huskies.svg" alt="logo" class="header-logo" >
    <h2 class="header-title">Personal Profile Survey Builder</h2>
  </div>
  <div class="container">
    <!-- <h1>Personal Profile Survey Builder</h1> -->
    
    <form action="/form-builder/create" method="POST">
      <div class="form-group">
        <label>
          Enter Course Name
          <span class="tooltip">
            <span class="material-icons" 
              style="cursor: pointer; font-size: 16px; vertical-align: middle;">info</span>
            <span class="tooltiptext">Only alphabets, numbers, hyphens, and spaces are allowed.</span>
          </span>
        </label>
        <input 
          type="text" 
          name="formName" 
          pattern="[A-Za-z0-9\- ]+"
          required
          class="input-field"
        >
      </div>
      <div class="form-group">
        <label>Enter Number of Groups</label>
        <input 
          type="number" 
          name="groupSize" 
          min="2" 
          required
          class="input-field"
        >
      </div>

      <!-- <div class="button-group">
        <button 
          type="button" 
          class="add-skill-btn" 
          onclick="addSkill()"
        >
          <span class="material-icons">add_circle</span>
          Add Skill
        </button>
      </div> -->
      
      <div class="button-group">
        <button 
          type="button" 
          class="add-skill-btn" 
          onclick="addSkill()"
        >
          <span class="material-icons">add_circle</span>
          Add Skill
        </button>
        <button 
          type="button" 
          class="add-skill-btn" 
          onclick="confirmSkills()"
        >
          Set Skill Priority
        </button>
      </div>
      
      <div id="skillList">
        <div class="skill-container">
          <div class="skill-input">
            <label>Skill Name</label>
            <input 
              type="text" 
              name="skillName[]" 
              required
              class="input-field"
            >
          </div>
          <button 
            type="button" 
            class="delete-btn" 
            onclick="removeSkill(this)"
          >
            <span class="material-icons">delete</span>
          </button>
        </div>
      </div>
      <!-- Modal for confirming skills -->
<div id="skillsModal" style="display:none;">
  <div class="modal-content">
    <span class="close" onclick="closeModal()">&times;</span>
    <h2>Set Skill Priority</h2>
    <span class="material-icons" 
    style=" font-size: 16px; vertical-align: middle;">info</span>
    <span style="font-style: italic;font-size: 14px;">Drag to Reorder</span>
    <ul id="skillsListDisplay"></ul>
    <button  type="submit"  class="create-form-btn" onclick="confirmModal()">Confirm</button>
  </div>
</div>
      
      <button 
        type="submit" 
        class="create-form-btn">
        Create Form
      </button>
    </form>
  </div>

  <script>
    function addSkill() {
      const skillList = document.getElementById('skillList');
      const newSkill = document.createElement('div');
      newSkill.className = 'skill-container';
      newSkill.innerHTML = `
        <div class="skill-input">
          <label>Skill Name</label>
          <input 
            type="text" 
            name="skillName[]" 
            required
            class="input-field"
          >
        </div>
        <button 
          type="button" 
          class="delete-btn" 
          onclick="removeSkill(this)"
        >
          <span class="material-icons">delete</span>
        </button>
      `;
      skillList.appendChild(newSkill);
    }

    function removeSkill(button) {
      button.parentElement.remove();
    }
    let draggedItem = null;
    function confirmSkills() {
    // const skillInputs = document.querySelectorAll('input[name="skillName[]"]');
    // const skillsListDisplay = document.getElementById('skillsListDisplay');
    // skillsListDisplay.innerHTML = ''; // Clear previous skills

    // skillInputs.forEach(input => {
    //   if (input.value) {
    //     const li = document.createElement('li');
    //     li.textContent = input.value;
    //     skillsListDisplay.appendChild(li);
    //   }
    // });

    // document.getElementById('skillsModal').style.display = 'block'; // Show modal
    const skillList = document.getElementById('skillList');
    const skillsData = []; // Reset skills data
    const skills = skillList.getElementsByClassName('skill-input');

    // Populate skillsData array
    for (let i = 0; i < skills.length; i++) {
        const skillName = skills[i].getElementsByTagName('input')[0].value;
        skillsData.push(skillName); // Store skill names
    }

    // Clear previous skills in the modal
    const skillsListDisplay = document.getElementById('skillsListDisplay');
    skillsListDisplay.innerHTML = ''; // Clear previous list
     // Create list items for each skill
     skillsData.forEach(skill => {
        const li = document.createElement('li');
        li.textContent = skill;
        li.setAttribute('draggable', 'true');
        li.addEventListener('dragstart', dragStart);
        li.addEventListener('dragend', dragEnd);
        skillsListDisplay.appendChild(li);
    });

    // Show the modal
    // $('#skillsModal').show();
    document.getElementById('skillsModal').style.display = 'block'
 
  }
function closeModal(){
  document.getElementById('skillsModal').style.display = 'none'; // Hide modal
}
  function confirmModal() {
    document.getElementById('skillsModal').style.display = 'none'; // Hide modal
    const newOrder = Array.from(document.querySelectorAll('#skillsListDisplay li')).map(li => li.textContent);
console.log(newOrder)
// Update the hidden input fields in the form with the new order
const skillList = document.getElementById('skillList');
    skillList.innerHTML = ''; // Clear previous skills in the form
    newOrder.forEach((skill, index) => {
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = `skillName[${index}]`; // Use an array format for the input names
        input.value = skill;
        skillList.appendChild(input);
    });
  }
    
  // Drag and drop event handlers
function dragStart(e) {
    draggedItem = e.target;
    setTimeout(() => {
        e.target.style.display = 'none';
    }, 0);
}

function dragEnd(e) {
    setTimeout(() => {
        e.target.style.display = '';
        draggedItem = null;
    }, 0);
}
document.getElementById('skillsListDisplay').addEventListener('dragover', (e) => {
    e.preventDefault();
    const afterElement = getDragAfterElement(e.clientY);
    const currentElement = document.querySelector('.dragging');
    if (afterElement == null) {
        skillsListDisplay.appendChild(draggedItem);
    } else {
        skillsListDisplay.insertBefore(draggedItem, afterElement);
    }
});
const getDragAfterElement = (y) => {
    const draggableElements = [
        ...document.querySelectorAll('#skillsListDisplay li:not(.dragging)'),
    ];

    return draggableElements.reduce((closest, child) => {
        const box = child.getBoundingClientRect();
        const offset = y - box.top - box.height / 2;
        if (offset < 0 && offset > closest.offset) {
            return {
                offset: offset,
                element: child,
            };
        } else {
            return closest;
        }
    }, {
        offset: Number.NEGATIVE_INFINITY,
    }).element;
};
  
  </script>
</body>
</html>
